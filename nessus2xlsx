#!/usr/bin/python
# encoding: utf-8
# Transform Nessus xml to Excel
# Authors: Benjamin Kellermann, Bj√∂rn Kirschner, Jan Rude
# License: GPLv3
import sys
import os
import re

if len(sys.argv) < 3:
	sys.exit('Usage: %s <input-xml.nessus> <output.xlsx>' % sys.argv[0])

if not os.path.exists(sys.argv[1]):
	sys.exit('ERROR: Input %s was not found!' % sys.argv[1])

if os.path.exists(sys.argv[2]):
	sys.exit('ERROR: Output %s already exists!' % sys.argv[2])

import xml.etree.ElementTree as ET
from openpyxl import Workbook
from openpyxl.utils import get_column_letter
from openpyxl.worksheet.table import Table, TableStyleInfo
from openpyxl.styles import PatternFill, Font, Alignment, Border, Side

ns = {'cm': 'http://www.nessus.org/cm'}

severity_levels = {
	0: 'None',
	1: 'Low',
	2: 'Medium',
	3: 'High',
	4: 'Critical'
}

xml = ET.parse(sys.argv[1])
root = xml.getroot()

# Open up a new excel file
wb = Workbook()
vulns_wb = wb.active
vulns_wb.title = "Vulnerabilities"
vulns_wb.append(["Hostname", "Port", "Severity", "MGM Rating", "Comment", "Name", "Description", "Output", "Solution", "See Also"])

# Add a default style with striped rows and banded columns
style = TableStyleInfo(name="TableStyleMedium2", showRowStripes=True, showColumnStripes=False)

# Check if report has compliance checks in it
compliance_wb = ''
for report_item in root.iter('ReportItem'):
	if "Compliance" in report_item.get('pluginName'):
		compliance_wb = wb.create_sheet()
		compliance_wb.title = "Compliance Checks"
		compliance_wb.append(["Hostname", "Result", "Name", "Output", "Description", "Solution", "See Also"])
		break

# Iterate through findings
for host in root.iter('ReportHost'):
	hostname = host.get('name')

	for report_item in host.iter('ReportItem'):
		severity = severity_levels.get(int(report_item.get('severity')))
		description = report_item.find('description').text if not (report_item.find('description') is None) else ""

		pluginFamily = report_item.get('pluginFamily')
		# Compliance Check
		if pluginFamily == "Policy Compliance":
			name = report_item.find('cm:compliance-check-name', ns).text
			compliance_result = report_item.find('cm:compliance-result', ns)
			result = compliance_result.text
			actual_value = report_item.find('cm:compliance-actual-value', ns)
			if actual_value is None:  # usually when PASSED
				output = ''
			else:
				output = actual_value.text
			actual_solution = report_item.find('cm:compliance-solution', ns)
			if actual_solution is None:  # usually when PASSED
				solution = ''
			else:
				solution = actual_solution.text

			desc_pre = description.find('\n')
			desc_past = description.find('\nReference(s) : ')
			description_final = description[desc_pre+2:desc_past-1]

			temp_see_also = report_item.find('cm:compliance-see-also', ns)
			if temp_see_also is None:  # usually when PASSED
				see_also = ''
			else:
				see_also = temp_see_also.text

			compliance_wb.append([hostname, result, name, output, description_final, solution, see_also])

		else:
			port = (report_item.get('protocol') + "/" + report_item.get('port'))
			name = report_item.find('plugin_name').text
			output = report_item.find('plugin_output')
			if output is not None:
				output = output.text
			else:
				output = ""
			solution = report_item.find('solution').text if not (report_item.find('solution') is None) else ""
			see_also = report_item.find('see_also').text if not (report_item.find('see_also') is None) else ""
			see_also = see_also.encode()

			vulns_wb.append([hostname, port, severity, '', '', name, description, output, solution, see_also])

## Style options
# Host column
vulns_wb.column_dimensions['A'].width = 15
for host in vulns_wb['A']:
	host.alignment = Alignment(horizontal='center', vertical='center')

# Port column
vulns_wb.column_dimensions['B'].width = 10
for host in vulns_wb['B']:
	host.alignment = Alignment(horizontal='center', vertical='center')

# Severity column
vulns_wb.column_dimensions['C'].width = 14
for severity in vulns_wb['C']:
	if severity.value == "Low":
		severity.fill = PatternFill(fgColor='32CD32', fill_type = 'solid')
	elif severity.value == "Medium":
		severity.fill = PatternFill(fgColor='FFEE08', fill_type = 'solid')
	elif severity.value == "High":
		severity.fill = PatternFill(fgColor='FF8C00', fill_type = 'solid')
	elif severity.value == "Critical":
		severity.fill = PatternFill(fgColor='FF0000', fill_type = 'solid')
	severity.alignment = Alignment(horizontal='center', vertical='center')

# MGM rating column
vulns_wb.column_dimensions['D'].width = 18
for name in vulns_wb['D']:
	name.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)

# Comment
vulns_wb.column_dimensions['E'].width = 30
for comment in vulns_wb['E']:
	comment.alignment = Alignment(vertical='center', wrap_text=True)

# Name, Description, Output, Solution, See Also column
for column in ['F', 'G', 'H', 'I', 'J']:
	vulns_wb.column_dimensions[column].width = 50
	for col in vulns_wb[column]:
		col.alignment = Alignment(vertical='center', wrap_text=True)

# Center first row
for cell in vulns_wb['A':get_column_letter(vulns_wb.max_column)]:
	cell[0].alignment = Alignment(horizontal='center')

# Add sorting filter
vulns_wb.auto_filter.add_filter_column(2, ['Critical', 'High', 'Medium', 'Low'])
vulns_wb.auto_filter.add_sort_condition('C:C')

if vulns_wb.max_row == 1:  # if table is empty
	tab = Table(displayName="Vulnerabilities", ref="A1:J2")
else:
	tab = Table(displayName="Vulnerabilities", ref="A1:{}{}".format(get_column_letter(vulns_wb.max_column), vulns_wb.max_row))
tab.tableStyleInfo = style
vulns_wb.add_table(tab)

if compliance_wb:
	# Hostname column
	compliance_wb.column_dimensions['A'].width = 15
	for host in compliance_wb['A']:
		host.alignment = Alignment(horizontal='center', vertical='center')

	# compliance check result colors
	compliance_wb.column_dimensions['B'].width = 12
	for severity in compliance_wb['B']:
		if severity.value == "PASSED":
			severity.fill = PatternFill(fgColor='32CD32', fill_type='solid')
		elif severity.value == "ERROR":
			severity.fill = PatternFill(fgColor='FFEE08', fill_type='solid')
		elif severity.value == "FAILED":
			severity.fill = PatternFill(fgColor='FF0000', fill_type='solid')
		severity.alignment = Alignment(horizontal='center', vertical='center')

	# Name, Output column
	for column in ['C', 'D']:
		compliance_wb.column_dimensions[column].width = 30
		for col in compliance_wb[column]:
			col.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)

	# Description, Solution column
	for column in ['E', 'F']:
		compliance_wb.column_dimensions[column].width = 70
		for col in compliance_wb[column]:
			col.alignment = Alignment(vertical='center', wrap_text=True)

	# 'See Also' column
	compliance_wb.column_dimensions['G'].width = 40
	for see in compliance_wb['G']:
		see.alignment = Alignment(vertical='center', wrap_text=True)

	# Center first row
	for cell in compliance_wb['A':get_column_letter(compliance_wb.max_column)]:
		cell[0].alignment = Alignment(horizontal='center')

	tab = Table(displayName="Compliance", ref="A1:{}{}".format(get_column_letter(compliance_wb.max_column), compliance_wb.max_row))
	tab.tableStyleInfo = style
	compliance_wb.add_table(tab)

# Save the file
wb.save(filename=sys.argv[2])
